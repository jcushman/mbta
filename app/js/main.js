// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  $(function() {

    /* helpers */
    var $body, apiRequest, key, params, showRoutes, showTimetables, v, val, _i, _len, _ref, _ref1;
    $body = $("body");
    apiRequest = function(endpoint, query) {
      if (query == null) {
        query = {};
      }
      query.format = "json";
      return $.ajax({
        url: "php/api_reflector.php",
        data: {
          endpoint: endpoint,
          query: $.param(query)
        }
      });
    };

    /* views */
    showTimetables = function() {
      var bodyFontSize, i, routes, setBodyFontSize, stop, stops, times, updateStops, _i, _len, _results;
      $body.html("");
      stops = params.stops.split(",");
      times = params.times.split(",");
      routes = params.routes.split(",");
      stops = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = stops.length; _i < _len; i = ++_i) {
          stop = stops[i];
          _results.push({
            id: stop,
            time: times[i],
            route: routes[i]
          });
        }
        return _results;
      })();
      bodyFontSize = 2;
      setBodyFontSize = function() {
        return $body.css('font-size', "" + bodyFontSize + "em");
      };
      updateStops = function() {
        var requests;
        console.log(stops);
        requests = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = stops.length; _i < _len; _i++) {
            stop = stops[_i];
            _results.push(apiRequest("predictionsbystop", {
              stop: stop.id
            }));
          }
          return _results;
        })();
        return $.when.apply($, requests).done(function() {
          var data, firstDisplayIndex, html, mode, primaryTrip, primaryTripIndex, response, responseAge, responseObject, responseStatus, responses, route, trip, trips, _i, _j, _k, _len, _len1, _len2;
          responses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (stops.length === 1) {
            responses = [responses];
          }
          html = "<table>";
          for (i = _i = 0, _len = responses.length; _i < _len; i = ++_i) {
            response = responses[i];
            data = response[0], responseStatus = response[1], responseObject = response[2];
            responseAge = requests[i].getResponseHeader('Age');
            stop = stops[i];
            mode = data.mode[0];
            route = mode.route.filter(function(r) {
              return r.route_id === stop.route;
            })[0];
            html += "<tr class='header'><td colspan='2'>" + data.stop_name + " " + (route.route_name || "") + " " + mode.mode_name + " <div class='subhead'>(" + stop.time + " minutes' walk)</div></td></tr>";
            if (route) {
              trips = route.direction[0].trip;
              trips.sort(function(a, b) {
                return a.pre_away - b.pre_away;
              });
              primaryTripIndex = -1;
              for (i = _j = 0, _len1 = trips.length; _j < _len1; i = ++_j) {
                trip = trips[i];
                trip.minutes = Math.floor((trip.pre_away - responseAge) / 60) - stop.time;
                primaryTrip = false;
                if (trip.minutes > 0 && primaryTripIndex < 0) {
                  primaryTripIndex = i;
                  trip.primary = true;
                }
              }
              firstDisplayIndex = Math.max(primaryTripIndex - 1, 0);
              trips = trips.slice(firstDisplayIndex, firstDisplayIndex + 4);
              for (i = _k = 0, _len2 = trips.length; _k < _len2; i = ++_k) {
                trip = trips[i];
                html += "<tr class='" + (trip.primary ? "primary" : "") + "'>\n   <td>" + trip.trip_headsign + "</td>\n   <td><div class='small'>Leave here in</div>" + trip.minutes + "&nbsp;min.</td>\n</tr>";
              }
            } else {
              html += "<tr><td>No predictions available</td><td></td></tr>";
            }
          }
          $body.html(html);
          while ($body.offset().top + $body.height() < $(window).height() && $(window).width() >= $('table').width()) {
            bodyFontSize += .1;
            setBodyFontSize();
          }
          bodyFontSize -= .1;
          return setBodyFontSize();
        });
      };
      _results = [];
      for (_i = 0, _len = stops.length; _i < _len; _i++) {
        stop = stops[_i];
        setInterval(updateStops, 1000 * 60);
        _results.push(updateStops());
      }
      return _results;
    };
    showRoutes = function() {
      $body.html("<div id='chooser'>\n  <h1>Choose routes</h1>\n  <form onsubmit=\"return false\">\n    <div id='routes'></div>\n    <!--<div>Choose stop: <select name='stop' id='stop'></select></div>\n    <div>Travel time: <input type='text' name='travel-time' value=\"0\" id='travel-time'> minutes <span class=\"help-text\">How long does it take you to walk to this stop?</span></div>-->\n    <div><input type='submit' value='View upcoming trips' id='submit-button'></div>\n  </form>\n</div>");
      apiRequest("routes").done(function(data) {
        var html, mode, route, _i, _j, _len, _len1, _ref, _ref1;
        console.log(data);
        html = "";
        _ref = data.mode;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mode = _ref[_i];
          html += "<div>" + mode.mode_name + "</div><div class='route-list'>";
          _ref1 = mode.route;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            route = _ref1[_j];
            html += "<li class='route'><a href='#' data-routeId='" + route.route_id + "'>" + route.route_name + "</a></li>";
          }
          html += "</div>";
        }
        return $('#routes').html(html);
      });
      $body.on("click", ".route a", function() {
        var routeId, routeLink;
        console.log("clicked!");
        routeLink = $(this);
        routeId = routeLink.attr('data-routeId');
        apiRequest("stopsbyroute", {
          route: routeId
        }).done(function(data) {
          var direction, html, stop, _i, _j, _len, _len1, _ref, _ref1;
          console.log(data);
          html = "<div class='stops'>";
          _ref = data.direction;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            direction = _ref[_i];
            html += "<div class='direction'>" + direction.direction_name + "</div>";
            _ref1 = direction.stop;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              stop = _ref1[_j];
              html += "<div>\n  <input type='checkbox' name='stops' value='" + stop.stop_id + "' data-routeId='" + routeId + "'>\n  " + stop.stop_name + ":\n  <input type='text' id='minutes_" + stop.stop_id + "' value='0' class='stop-minutes'> minutes away\n</div>";
            }
          }
          html += "</div>";
          return routeLink.after(html);
        });
        return false;
      });
      return $("form").on("submit", function() {
        var checkbox, routes, stopId, stops, times, _i, _len, _ref;
        stops = [];
        times = [];
        routes = [];
        _ref = $(':checked');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          checkbox = _ref[_i];
          stopId = $(checkbox).val();
          stops.push(stopId);
          times.push($('#minutes_' + stopId).val());
          routes.push($(checkbox).attr('data-routeId'));
        }
        document.location = "?stops=" + (stops.join(",")) + "&times=" + (times.join(",")) + "&routes=" + (routes.join(","));
        return false;
      });
    };

    /* controller */
    params = {};
    _ref = window.location.search.substring(1).split("&");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _ref1 = v.split("="), key = _ref1[0], val = _ref1[1];
      params[key] = decodeURIComponent(val);
    }
    if (params.stops) {
      return showTimetables();
    } else {
      return showRoutes();
    }
  });

}).call(this);
